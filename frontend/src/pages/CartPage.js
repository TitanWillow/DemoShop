import { useOrder } from '../context/OrderContext';
import Button from '../components/common/Button';
import { ShoppingCart, MinusCircle, PlusCircle, Trash2, ChevronRight, ChevronLeft} from 'lucide-react'; 
const CartPage = ({ onNavigate }) => {
  const { cart, removeFromCart, updateCartQuantity, totalCartItems, clearCart } = useOrder();
  const cartSubtotal = cart.reduce((sum, item) => sum + item.product.price * item.quantity, 0);
  if (cart.length === 0) { return ( <div className="container mx-auto p-8 text-center min-h-[calc(100vh-300px)] flex flex-col justify-center items-center"> <ShoppingCart size={60} className="text-gray-300 mb-6" /> <h1 className="text-3xl font-bold text-gray-700 mb-4">Your Cart is Empty</h1> <p className="text-gray-500 mb-8">Looks like you haven't added anything to your cart yet.</p> <Button onClick={() => onNavigate('landing')} size="large"> <ChevronLeft size={20} className="mr-2"/> Continue Shopping </Button> </div> ); }
  return ( <div className="container mx-auto p-4 md:p-8"> <h1 className="text-3xl font-bold text-gray-800 mb-8">Your Shopping Cart</h1> <div className="bg-white shadow-lg rounded-lg p-6"> {cart.map(item => ( <div key={item.lineItemId} className="flex flex-col sm:flex-row items-center justify-between py-4 border-b border-gray-200 last:border-b-0"> <div className="flex items-center mb-4 sm:mb-0 w-full sm:w-auto flex-grow"> <img src={item.product.defaultImageUrl || item.product.imageUrls?.[0]} alt={item.product.name} className="w-20 h-20 rounded object-cover mr-4" onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/80x80/CCCCCC/777777?text=Img"; }}/> <div className="flex-grow"> <h2 className="text-lg font-semibold text-gray-800">{item.product.name}</h2> <p className="text-sm text-gray-500">{item.variant.name}</p> <p className="text-sm text-indigo-600 font-medium">Rs {item.product.price.toFixed(2)} each</p> </div> </div> <div className="flex items-center space-x-3 sm:space-x-4 w-full sm:w-auto justify-between sm:justify-end mt-4 sm:mt-0"> <div className="flex items-center border border-gray-300 rounded"> <button onClick={() => updateCartQuantity(item.lineItemId, item.quantity - 1)} disabled={item.quantity <= 1} className="p-2 text-gray-600 hover:bg-gray-100 disabled:opacity-50"><MinusCircle size={18}/></button> <span className="px-3 py-1 text-center w-10">{item.quantity}</span> <button onClick={() => updateCartQuantity(item.lineItemId, item.quantity + 1)} disabled={item.quantity >= item.variant.stock} className="p-2 text-gray-600 hover:bg-gray-100 disabled:opacity-50"><PlusCircle size={18}/></button> </div> <p className="text-md font-semibold text-gray-800 w-20 text-right">Rs {(item.product.price * item.quantity).toFixed(2)}</p> <Button onClick={() => removeFromCart(item.lineItemId)} variant="ghost" size="small" className="text-red-500 hover:text-red-700 !p-1 aspect-square"> <Trash2 size={18}/> </Button> </div> </div> ))} <div className="mt-6 pt-6 border-t border-gray-200"> <div className="flex justify-between items-center mb-2"> <p className="text-lg text-gray-600">Subtotal ({totalCartItems} items):</p> <p className="text-xl font-bold text-gray-800">Rs {cartSubtotal.toFixed(2)}</p> </div> <p className="text-sm text-gray-500 text-right mb-6">Shipping and taxes calculated at checkout.</p> <div className="flex flex-col sm:flex-row justify-between items-center gap-4"> <Button onClick={clearCart} variant="danger" size="normal" className="w-full sm:w-auto order-2 sm:order-1"> Clear Cart </Button> <Button onClick={() => onNavigate('checkout')} variant="warning" size="large" className="w-full sm:w-auto order-1 sm:order-2"> Proceed to Checkout <ChevronRight size={20} className="ml-2"/> </Button> </div> </div> </div> </div> );
};
export default CartPage;